using System.Text;
using System.Text.Json.Serialization;

namespace Sinch.Voice.Calls.Actions
{
    /// <summary>
    ///     Parks the call and places the caller on hold. The caller is placed into a loop, listening to an IVR prompt (either
    ///     a pre-recorded audio file or generated by text to speech). If the call is unparked, prompts will stop playing
    ///     immediately. If the max duration is reached, the last prompt will be fully played until the call ends.
    /// </summary>
    public sealed class Park : IAction
    {
        public string Name { get; } = "park";

        /// <summary>
        ///     The voice and language you want to use for the text-to-speech message. This can either be defined by the ISO 639
        ///     locale and language code or by specifying a particular voice. Supported languages and voices are detailed
        ///     <see href="https://developers.sinch.com/docs/voice/api-reference/voice/voice-locales">here</see>.
        /// </summary>
        [JsonPropertyName("locale")]
        public string Locale { get; set; }


        /// <summary>
        ///     That prompt that is played when the call is first answered. You can use text-to-speech using the &#x60;#tts[]&#x60;
        ///     element, SSML commands using the &#x60;#ssml[]&#x60; element.
        /// </summary>
        [JsonPropertyName("introPromt")]
        public string IntroPrompt { get; set; }


        /// <summary>
        ///     The prompt that is played on repeat until the call is unparked or the until the &#x60;maxDuration&#x60; value is
        ///     reached. You can use text-to-speech using the &#x60;#tts[]&#x60; element, SSML commands using the &#x60;#ssml[]
        ///     &#x60; element.
        /// </summary>
        [JsonPropertyName("holdPrompt")]
        public string HoldPrompt { get; set; }


        /// <summary>
        ///     The maximum amount of time in seconds that the &#x60;holdPrompt&#x60; will be played.
        /// </summary>
        [JsonPropertyName("maxDuration")]
        public int? MaxDuration { get; set; }


        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Park {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  IntroPrompt: ").Append(IntroPrompt).Append("\n");
            sb.Append("  HoldPrompt: ").Append(HoldPrompt).Append("\n");
            sb.Append("  MaxDuration: ").Append(MaxDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }
}
