using System;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Sinch.Core;
using Sinch.Logger;
using Sinch.Voice.Calls.Manage;
using Sinch.Voice.Calls.Update;

namespace Sinch.Voice.Calls
{
    /// <summary>
    ///     Using the Calls endpoint, you can manage on-going calls or retrieve information about a call.
    /// </summary>
    public interface ISinchVoiceCalls
    {
        /// <summary>
        ///     This method is used to manage ongoing, connected calls. This method uses SVAML in the request body to perform
        ///     various tasks related to the call. For more information about SVAML, see the
        ///     <see href="https://developers.sinch.com/docs/voice/api-reference/svaml/">Callback API</see> documentation.
        ///     <br /><br />
        ///     This method can only be used for calls that originate from or terminate to PSTN or SIP networks.
        /// </summary>
        /// <param name="request"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Successful task if response code is 204</returns>
        Task Update(UpdateCallRequest request, CancellationToken cancellationToken = default);

        /// <summary>
        ///     ou can retrieve information about an ongoing or completed call using a call ID. You can find the call ID of an
        ///     ongoing call by viewing the response object from a callout request. You can find the call ID of a completed call by
        ///     looking at your call logs in your Sinch <see href="https://dashboard.sinch.com/voice/logs">Dashboard</see>.
        ///     <br /><br />
        ///     Note: You can only use this method for calls that terminate to PSTN or SIP networks from an In-app call.
        /// </summary>
        /// <param name="callId"></param>
        /// <param name="cancellationToken"></param>
        /// <returns></returns>
        Task<Call> Get(string callId, CancellationToken cancellationToken = default);

        /// <summary>
        ///     This method is used to manage ongoing, connected calls. This method is only used when using the PlayFiles and Say
        ///     instructions in the request body. This method uses SVAML in the request body to perform various tasks related to
        ///     the call. For more information about SVAML, see the
        ///     <see href="https://developers.sinch.com/docs/voice/api-reference/svaml/">Callback API</see> documentation.
        ///     Note: You can only use this method for calls that originate from or terminate to PSTN or SIP networks.
        /// </summary>
        /// <param name="callId">The unique identifier of the call. This value is generated by the system.</param>
        /// <param name="callLeg"></param>
        /// <param name="request"></param>
        /// <param name="cancellationToken"></param>
        /// <returns>Successful task if response code is 200</returns>
        Task ManageWithCallLeg(string callId, CallLeg callLeg, ManageWithCallLegRequest request,
            CancellationToken cancellationToken = default);
    }


    /// <inheritdoc />
    internal class SinchCalls : ISinchVoiceCalls
    {
        private readonly ILoggerAdapter<ISinchVoiceCalls>? _logger;
        private readonly Uri _baseAddress;
        private readonly IHttp _http;

        public SinchCalls(ILoggerAdapter<ISinchVoiceCalls>? logger, Uri baseAddress, IHttp http)
        {
            _logger = logger;
            _baseAddress = baseAddress;
            _http = http;
        }

        /// <inheritdoc />
        public Task Update(UpdateCallRequest request, CancellationToken cancellationToken = default)
        {
            var uri = new Uri(_baseAddress, $"calling/v1/calls/id/{request.CallId}");
            _logger?.LogDebug("Updating a call with {id}", request.CallId);
            return _http.Send<object, object>(uri, HttpMethod.Patch, new
            {
                instructions = request.Instructions,
                action = request.Action
            },
                cancellationToken: cancellationToken);
        }

        /// <inheritdoc />
        public Task<Call> Get(string callId, CancellationToken cancellationToken = default)
        {
            var uri = new Uri(_baseAddress, $"calling/v1/calls/id/{callId}");
            _logger?.LogDebug("Getting info about a call with {id}", callId);
            return _http.Send<Call>(uri, HttpMethod.Get,
                cancellationToken: cancellationToken)!;
        }

        /// <inheritdoc />
        public Task ManageWithCallLeg(string callId, CallLeg callLeg, ManageWithCallLegRequest request,
            CancellationToken cancellationToken = default)
        {
            var uri = new Uri(_baseAddress, $"calling/v1/calls/id/{callId}/leg/{callLeg.Value}");
            _logger?.LogDebug("Managing call with {id} and {callLeg}", callId, callLeg);
            return _http.Send<ManageWithCallLegRequest, object>(uri, HttpMethod.Patch, request,
                cancellationToken: cancellationToken);
        }
    }
}
